/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.rong.imlib.internal.swig;

public class RcimNativeIntListener {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected RcimNativeIntListener(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(RcimNativeIntListener obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(RcimNativeIntListener obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RcClientJNI.delete_RcimNativeIntListener(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    RcClientJNI.RcimNativeIntListener_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    RcClientJNI.RcimNativeIntListener_change_ownership(this, swigCPtr, true);
  }

/**
 * 该方法由配置生成<p>
 * delete() 方法名太过于普通，所以新增 swigDelete()<p>
 * 使用该方法进行释放，不要使用 delete()<p>
 * 方便进行代码创建、释放的检查
 */
public synchronized void swigDelete() {
    delete();
}

/**
 * 该方法由配置生成<p>
 * WARNING： 原则上不能调用该方法，除非你明确知道你需要这个方法<p>
 * 静态工厂方法：从 C 指针构建该对象
 */
public static RcimNativeIntListener fromPointer(long cPtr) {
    return new RcimNativeIntListener(cPtr, false);
}

/**
 * 该方法由配置生成<p>
 * WARNING： 原则上不能调用该方法，除非你明确知道你需要这个方法<p>
 * 获取原始指针
 */
public long getCPtr() {
    return swigCPtr;
}

  public RcimNativeIntListener() {
    this(RcClientJNI.new_RcimNativeIntListener(), true);
    RcClientJNI.RcimNativeIntListener_director_connect(this, swigCPtr, true, true);
  }

  public void onChanged(int value) {
    RcClientJNI.RcimNativeIntListener_onChanged(swigCPtr, this, value);
  }

}

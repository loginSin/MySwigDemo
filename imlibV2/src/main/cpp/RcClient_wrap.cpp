/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040301
#define SWIGJAVA
#define SWIG_DIRECTORS

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } } while (0)

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION) || defined(DEBUG_DIRECTOR_THREAD_NAME)
#include <iostream>
#endif

#include <exception>

#if defined(SWIG_JAVA_USE_THREAD_NAME)

#if !defined(SWIG_JAVA_GET_THREAD_NAME)
namespace Swig {
  SWIGINTERN int GetThreadName(char *name, size_t len);
}

#if defined(__linux__)

#include <sys/prctl.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
#if defined(PR_GET_NAME)
  return prctl(PR_GET_NAME, (unsigned long)name, 0, 0, 0);
#else
  (void)name;
  return 1;
#endif
}

#elif defined(__unix__) || defined(__APPLE__)

#include <pthread.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  return pthread_getname_np(pthread_self(), name, len);
}

#else

SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
  (void)name;
  return 1;
}
#endif

#endif

#endif

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
#include <pthread.h>
#endif

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(SWIG_NULLPTR), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = SWIG_NULLPTR;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, SWIG_NULLPTR) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = SWIG_NULLPTR;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
    static void detach(void *jvm) {
      static_cast<JavaVM *>(jvm)->DetachCurrentThread();
    }

    static void make_detach_key() {
      pthread_key_create(&detach_key_, detach);
    }

    /* thread-local key to register a destructor */
    static pthread_key_t detach_key_;
#endif

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
  pthread_key_t JObjectWrapper::detach_key_;
#endif

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(SWIG_NULLPTR), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
        JavaVMAttachArgs args;
        args.version = JNI_VERSION_1_2;
        args.group = SWIG_NULLPTR;
        args.name = SWIG_NULLPTR;
#if defined(SWIG_JAVA_USE_THREAD_NAME)
        char thread_name[64];  // MAX_TASK_COMM_LEN=16 is hard-coded in the Linux kernel and MacOS has MAXTHREADNAMESIZE=64.
        if (Swig::GetThreadName(thread_name, sizeof(thread_name)) == 0) {
          args.name = thread_name;
#if defined(DEBUG_DIRECTOR_THREAD_NAME)
          std::cout << "JNIEnvWrapper: thread name: " << thread_name << std::endl;
        } else {
          std::cout << "JNIEnvWrapper: Couldn't set Java thread name" << std::endl;
#endif
        }
#endif
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, &args);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, &args);
#endif

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
        // At least on Android 6, detaching after every call causes a memory leak.
        // Instead, register a thread desructor and detach only when the thread ends.
        // See https://developer.android.com/training/articles/perf-jni#threads
        static pthread_once_t once = PTHREAD_ONCE_INIT;

        pthread_once(&once, JObjectWrapper::make_detach_key);
        pthread_setspecific(JObjectWrapper::detach_key_, director->swig_jvm_);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_DETACH_ON_THREAD_END) && !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    struct SwigDirectorMethod {
      const char *name;
      const char *desc;
      jmethodID methid;
      SwigDirectorMethod(JNIEnv *jenv, jclass baseclass, const char *name, const char *desc) : name(name), desc(desc) {
        methid = jenv->GetMethodID(baseclass, name, desc);
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, SWIG_NULLPTR) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

    jclass swig_new_global_ref(JNIEnv *jenv, const char *classname) {
      jclass clz = jenv->FindClass(classname);
      return clz ? (jclass)jenv->NewGlobalRef(clz) : SWIG_NULLPTR;
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) SWIG_NULLPTR), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(SWIG_NULLPTR) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, SWIG_NULLPTR);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    // Return a C string of the exception message in the jthrowable passed in the constructor
    // If no message is available, null_string is return instead
    const char *message(const char *null_string = "Could not get exception message in JavaExceptionMessage") const {
      return message_.c_str(null_string);
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = SWIG_NULLPTR;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == SWIG_NULLPTR && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : jenv_(jenv), throwable_(throwable), classname_(SWIG_NULLPTR), msg_(SWIG_NULLPTR) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(SWIG_NULLPTR);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message(SWIG_NULLPTR));
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : jenv_(SWIG_NULLPTR), throwable_(SWIG_NULLPTR), classname_(SWIG_NULLPTR), msg_(msg ? copystr(msg) : SWIG_NULLPTR) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_ ? msg_ : "Unspecified DirectorException message";
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void throwException(JNIEnv *jenv) const {
      if (jenv) {
        if (jenv == jenv_ && throwable_) {
          // Throw original exception if not already pending
          jthrowable throwable = jenv->ExceptionOccurred();
          if (throwable && jenv->IsSameObject(throwable, throwable_) == JNI_FALSE) {
            jenv->ExceptionClear();
            throwable = SWIG_NULLPTR;
          }
          if (!throwable)
            jenv->Throw(throwable_);
        } else {
          // Try and reconstruct original exception, but original stacktrace is not reconstructed
          jenv->ExceptionClear();

          jmethodID ctorMethodID = SWIG_NULLPTR;
          jclass throwableclass = SWIG_NULLPTR;
          if (classname_) {
            throwableclass = jenv->FindClass(classname_);
            if (throwableclass)
              ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
          }

          if (ctorMethodID) {
            jenv->ThrowNew(throwableclass, what());
          } else {
            SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
          }
        }
      }
    }

    // Deprecated - use throwException
    void raiseJavaException(JNIEnv *jenv) const {
      throwException(jenv);
    }

    // Create and throw the DirectorException
    static void raise(JNIEnv *jenv, jthrowable throwable) {
      throw DirectorException(jenv, throwable);
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = SWIG_NULLPTR;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    JNIEnv *jenv_;
    jthrowable throwable_;
    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  // Note side effect of clearing any pending exceptions
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_RcClientJNI = NULL;
    jmethodID director_method_ids[4];
  }
}

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include <stdint.h>		// Use the C99 official header


#include <string.h>


#include "RcClient.h"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "RcClient_wrap.h"

SwigDirector_RcimNativeStringCallback::SwigDirector_RcimNativeStringCallback(JNIEnv *jenv) : rcim::RcimNativeStringCallback(), Swig::Director(jenv) {
}

SwigDirector_RcimNativeStringCallback::~SwigDirector_RcimNativeStringCallback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_RcimNativeStringCallback::onResult(rcim::RcimNativeStringCallback *deleteThis,int code,char const *value) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdeleteThis = 0 ;
  jint jcode  ;
  jstring jvalue = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method rcim::RcimNativeStringCallback::onResult.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((rcim::RcimNativeStringCallback **)&jdeleteThis) = (rcim::RcimNativeStringCallback *) deleteThis; 
    jcode = (jint) code;
    jvalue = 0;
    if (value) {
      jvalue = jenv->NewStringUTF((const char *)value);
      if (!jvalue) return ;
    }
    Swig::LocalRefGuard value_refguard(jenv, jvalue);
    jenv->CallStaticVoidMethod(Swig::jclass_RcClientJNI, Swig::director_method_ids[0], swigjobj, jdeleteThis, jcode, jvalue);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in rcim::RcimNativeStringCallback::onResult ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_RcimNativeStringCallback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "io/rong/imlib/swig/RcimNativeStringCallback");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "onResult", "(Lio/rong/imlib/swig/RcimNativeStringCallback;ILjava/lang/String;)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_RcimNativeSendMessageCallback::SwigDirector_RcimNativeSendMessageCallback(JNIEnv *jenv) : rcim::RcimNativeSendMessageCallback(), Swig::Director(jenv) {
}

SwigDirector_RcimNativeSendMessageCallback::~SwigDirector_RcimNativeSendMessageCallback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_RcimNativeSendMessageCallback::onSave(RcimMessageBox const *nativeMsg) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jnativeMsg = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method rcim::RcimNativeSendMessageCallback::onSave.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((RcimMessageBox **)&jnativeMsg) = (RcimMessageBox *) nativeMsg; 
    jenv->CallStaticVoidMethod(Swig::jclass_RcClientJNI, Swig::director_method_ids[1], swigjobj, jnativeMsg);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in rcim::RcimNativeSendMessageCallback::onSave ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_RcimNativeSendMessageCallback::onResult(rcim::RcimNativeSendMessageCallback *deleteThis,int code,RcimMessageBox const *nativeMsg) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdeleteThis = 0 ;
  jint jcode  ;
  jlong jnativeMsg = 0 ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method rcim::RcimNativeSendMessageCallback::onResult.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((rcim::RcimNativeSendMessageCallback **)&jdeleteThis) = (rcim::RcimNativeSendMessageCallback *) deleteThis; 
    jcode = (jint) code;
    *((RcimMessageBox **)&jnativeMsg) = (RcimMessageBox *) nativeMsg; 
    jenv->CallStaticVoidMethod(Swig::jclass_RcClientJNI, Swig::director_method_ids[2], swigjobj, jdeleteThis, jcode, jnativeMsg);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in rcim::RcimNativeSendMessageCallback::onResult ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_RcimNativeSendMessageCallback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "io/rong/imlib/swig/RcimNativeSendMessageCallback");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "onSave", "(Lio/rong/imlib/swig/RcimMessageBox;)V"),
    SwigDirectorMethod(jenv, baseclass, "onResult", "(Lio/rong/imlib/swig/RcimNativeSendMessageCallback;ILio/rong/imlib/swig/RcimMessageBox;)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_RcimNativeIntListener::SwigDirector_RcimNativeIntListener(JNIEnv *jenv) : rcim::RcimNativeIntListener(), Swig::Director(jenv) {
}

SwigDirector_RcimNativeIntListener::~SwigDirector_RcimNativeIntListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_RcimNativeIntListener::onChanged(int value) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jvalue  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method rcim::RcimNativeIntListener::onChanged.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jvalue = (jint) value;
    jenv->CallStaticVoidMethod(Swig::jclass_RcClientJNI, Swig::director_method_ids[3], swigjobj, jvalue);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in rcim::RcimNativeIntListener::onChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_RcimNativeIntListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "io/rong/imlib/swig/RcimNativeIntListener");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "onChanged", "(I)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimSDKVersion_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimSDKVersion *arg1 = (RcimSDKVersion *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimSDKVersion **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->name = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimSDKVersion_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimSDKVersion *arg1 = (RcimSDKVersion *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimSDKVersion **)&jarg1; 
  result = (char *) ((arg1)->name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimSDKVersion_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimSDKVersion *arg1 = (RcimSDKVersion *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimSDKVersion **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->version = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->version, (const char *)arg2);
    } else {
      arg1->version = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimSDKVersion_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimSDKVersion *arg1 = (RcimSDKVersion *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimSDKVersion **)&jarg1; 
  result = (char *) ((arg1)->version);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_new_1RcimSDKVersion(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RcimSDKVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RcimSDKVersion *)new RcimSDKVersion();
  *(RcimSDKVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_delete_1RcimSDKVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RcimSDKVersion *arg1 = (RcimSDKVersion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RcimSDKVersion **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimEngineBuilderParam_1app_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimEngineBuilderParam *arg1 = (RcimEngineBuilderParam *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimEngineBuilderParam **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->app_key = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->app_key, (const char *)arg2);
    } else {
      arg1->app_key = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimEngineBuilderParam_1app_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimEngineBuilderParam *arg1 = (RcimEngineBuilderParam *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimEngineBuilderParam **)&jarg1; 
  result = (char *) ((arg1)->app_key);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimEngineBuilderParam_1platform_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RcimEngineBuilderParam *arg1 = (RcimEngineBuilderParam *) 0 ;
  RcimPlatform arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimEngineBuilderParam **)&jarg1; 
  arg2 = (RcimPlatform)jarg2; 
  if (arg1) (arg1)->platform = arg2;
}


SWIGEXPORT jint JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimEngineBuilderParam_1platform_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RcimEngineBuilderParam *arg1 = (RcimEngineBuilderParam *) 0 ;
  RcimPlatform result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimEngineBuilderParam **)&jarg1; 
  result =  ((arg1)->platform);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimEngineBuilderParam_1device_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimEngineBuilderParam *arg1 = (RcimEngineBuilderParam *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimEngineBuilderParam **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->device_id = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->device_id, (const char *)arg2);
    } else {
      arg1->device_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimEngineBuilderParam_1device_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimEngineBuilderParam *arg1 = (RcimEngineBuilderParam *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimEngineBuilderParam **)&jarg1; 
  result = (char *) ((arg1)->device_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimEngineBuilderParam_1package_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimEngineBuilderParam *arg1 = (RcimEngineBuilderParam *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimEngineBuilderParam **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->package_name = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->package_name, (const char *)arg2);
    } else {
      arg1->package_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimEngineBuilderParam_1package_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimEngineBuilderParam *arg1 = (RcimEngineBuilderParam *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimEngineBuilderParam **)&jarg1; 
  result = (char *) ((arg1)->package_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimEngineBuilderParam_1imlib_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimEngineBuilderParam *arg1 = (RcimEngineBuilderParam *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimEngineBuilderParam **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->imlib_version = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->imlib_version, (const char *)arg2);
    } else {
      arg1->imlib_version = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimEngineBuilderParam_1imlib_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimEngineBuilderParam *arg1 = (RcimEngineBuilderParam *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimEngineBuilderParam **)&jarg1; 
  result = (char *) ((arg1)->imlib_version);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimEngineBuilderParam_1device_1model_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimEngineBuilderParam *arg1 = (RcimEngineBuilderParam *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimEngineBuilderParam **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->device_model = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->device_model, (const char *)arg2);
    } else {
      arg1->device_model = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimEngineBuilderParam_1device_1model_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimEngineBuilderParam *arg1 = (RcimEngineBuilderParam *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimEngineBuilderParam **)&jarg1; 
  result = (char *) ((arg1)->device_model);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimEngineBuilderParam_1device_1manufacturer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimEngineBuilderParam *arg1 = (RcimEngineBuilderParam *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimEngineBuilderParam **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->device_manufacturer = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->device_manufacturer, (const char *)arg2);
    } else {
      arg1->device_manufacturer = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimEngineBuilderParam_1device_1manufacturer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimEngineBuilderParam *arg1 = (RcimEngineBuilderParam *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimEngineBuilderParam **)&jarg1; 
  result = (char *) ((arg1)->device_manufacturer);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimEngineBuilderParam_1os_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimEngineBuilderParam *arg1 = (RcimEngineBuilderParam *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimEngineBuilderParam **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->os_version = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->os_version, (const char *)arg2);
    } else {
      arg1->os_version = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimEngineBuilderParam_1os_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimEngineBuilderParam *arg1 = (RcimEngineBuilderParam *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimEngineBuilderParam **)&jarg1; 
  result = (char *) ((arg1)->os_version);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimEngineBuilderParam_1sdk_1version_1vec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RcimEngineBuilderParam *arg1 = (RcimEngineBuilderParam *) 0 ;
  RcimSDKVersion *arg2 = (RcimSDKVersion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RcimEngineBuilderParam **)&jarg1; 
  arg2 = *(RcimSDKVersion **)&jarg2; 
  if (arg1) (arg1)->sdk_version_vec = (RcimSDKVersion const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimEngineBuilderParam_1sdk_1version_1vec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RcimEngineBuilderParam *arg1 = (RcimEngineBuilderParam *) 0 ;
  RcimSDKVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimEngineBuilderParam **)&jarg1; 
  result = (RcimSDKVersion *) ((arg1)->sdk_version_vec);
  *(RcimSDKVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimEngineBuilderParam_1sdk_1version_1vec_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RcimEngineBuilderParam *arg1 = (RcimEngineBuilderParam *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimEngineBuilderParam **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->sdk_version_vec_len = arg2;
}


SWIGEXPORT jint JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimEngineBuilderParam_1sdk_1version_1vec_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RcimEngineBuilderParam *arg1 = (RcimEngineBuilderParam *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimEngineBuilderParam **)&jarg1; 
  result = (int32_t) ((arg1)->sdk_version_vec_len);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimEngineBuilderParam_1app_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimEngineBuilderParam *arg1 = (RcimEngineBuilderParam *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimEngineBuilderParam **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->app_version = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->app_version, (const char *)arg2);
    } else {
      arg1->app_version = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimEngineBuilderParam_1app_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimEngineBuilderParam *arg1 = (RcimEngineBuilderParam *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimEngineBuilderParam **)&jarg1; 
  result = (char *) ((arg1)->app_version);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_new_1RcimEngineBuilderParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RcimEngineBuilderParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RcimEngineBuilderParam *)new RcimEngineBuilderParam();
  *(RcimEngineBuilderParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_delete_1RcimEngineBuilderParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RcimEngineBuilderParam *arg1 = (RcimEngineBuilderParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RcimEngineBuilderParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReceivedStatus_1is_1read_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RcimReceivedStatus *arg1 = (RcimReceivedStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReceivedStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_read = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReceivedStatus_1is_1read_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RcimReceivedStatus *arg1 = (RcimReceivedStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReceivedStatus **)&jarg1; 
  result = (bool) ((arg1)->is_read);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReceivedStatus_1is_1listened_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RcimReceivedStatus *arg1 = (RcimReceivedStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReceivedStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_listened = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReceivedStatus_1is_1listened_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RcimReceivedStatus *arg1 = (RcimReceivedStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReceivedStatus **)&jarg1; 
  result = (bool) ((arg1)->is_listened);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReceivedStatus_1is_1download_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RcimReceivedStatus *arg1 = (RcimReceivedStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReceivedStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_download = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReceivedStatus_1is_1download_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RcimReceivedStatus *arg1 = (RcimReceivedStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReceivedStatus **)&jarg1; 
  result = (bool) ((arg1)->is_download);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReceivedStatus_1is_1retrieved_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RcimReceivedStatus *arg1 = (RcimReceivedStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReceivedStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_retrieved = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReceivedStatus_1is_1retrieved_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RcimReceivedStatus *arg1 = (RcimReceivedStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReceivedStatus **)&jarg1; 
  result = (bool) ((arg1)->is_retrieved);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReceivedStatus_1is_1multiple_1received_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RcimReceivedStatus *arg1 = (RcimReceivedStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReceivedStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_multiple_received = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReceivedStatus_1is_1multiple_1received_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RcimReceivedStatus *arg1 = (RcimReceivedStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReceivedStatus **)&jarg1; 
  result = (bool) ((arg1)->is_multiple_received);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_new_1RcimReceivedStatus(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RcimReceivedStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RcimReceivedStatus *)new RcimReceivedStatus();
  *(RcimReceivedStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_delete_1RcimReceivedStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RcimReceivedStatus *arg1 = (RcimReceivedStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RcimReceivedStatus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReadReceiptUserInfo_1sender_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimReadReceiptUserInfo *arg1 = (RcimReadReceiptUserInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReadReceiptUserInfo **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->sender_id = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->sender_id, (const char *)arg2);
    } else {
      arg1->sender_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReadReceiptUserInfo_1sender_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimReadReceiptUserInfo *arg1 = (RcimReadReceiptUserInfo *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReadReceiptUserInfo **)&jarg1; 
  result = (char *) ((arg1)->sender_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReadReceiptUserInfo_1timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  RcimReadReceiptUserInfo *arg1 = (RcimReadReceiptUserInfo *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReadReceiptUserInfo **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->timestamp = arg2;
}


SWIGEXPORT jobject JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReadReceiptUserInfo_1timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  RcimReadReceiptUserInfo *arg1 = (RcimReadReceiptUserInfo *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReadReceiptUserInfo **)&jarg1; 
  result = (uint64_t) ((arg1)->timestamp);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReadReceiptUserInfo_1mentioned_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RcimReadReceiptUserInfo *arg1 = (RcimReadReceiptUserInfo *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReadReceiptUserInfo **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mentioned = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReadReceiptUserInfo_1mentioned_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RcimReadReceiptUserInfo *arg1 = (RcimReadReceiptUserInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReadReceiptUserInfo **)&jarg1; 
  result = (bool) ((arg1)->mentioned);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_new_1RcimReadReceiptUserInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RcimReadReceiptUserInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RcimReadReceiptUserInfo *)new RcimReadReceiptUserInfo();
  *(RcimReadReceiptUserInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_delete_1RcimReadReceiptUserInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RcimReadReceiptUserInfo *arg1 = (RcimReadReceiptUserInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RcimReadReceiptUserInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReadReceiptInfo_1is_1read_1receipt_1message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RcimReadReceiptInfo *arg1 = (RcimReadReceiptInfo *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReadReceiptInfo **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_read_receipt_message = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReadReceiptInfo_1is_1read_1receipt_1message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RcimReadReceiptInfo *arg1 = (RcimReadReceiptInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReadReceiptInfo **)&jarg1; 
  result = (bool) ((arg1)->is_read_receipt_message);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReadReceiptInfo_1has_1respond_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RcimReadReceiptInfo *arg1 = (RcimReadReceiptInfo *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReadReceiptInfo **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->has_respond = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReadReceiptInfo_1has_1respond_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RcimReadReceiptInfo *arg1 = (RcimReadReceiptInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReadReceiptInfo **)&jarg1; 
  result = (bool) ((arg1)->has_respond);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReadReceiptInfo_1respond_1user_1vec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RcimReadReceiptInfo *arg1 = (RcimReadReceiptInfo *) 0 ;
  RcimReadReceiptUserInfo *arg2 = (RcimReadReceiptUserInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RcimReadReceiptInfo **)&jarg1; 
  arg2 = *(RcimReadReceiptUserInfo **)&jarg2; 
  if (arg1) (arg1)->respond_user_vec = (RcimReadReceiptUserInfo const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReadReceiptInfo_1respond_1user_1vec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RcimReadReceiptInfo *arg1 = (RcimReadReceiptInfo *) 0 ;
  RcimReadReceiptUserInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReadReceiptInfo **)&jarg1; 
  result = (RcimReadReceiptUserInfo *) ((arg1)->respond_user_vec);
  *(RcimReadReceiptUserInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReadReceiptInfo_1respond_1user_1vec_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RcimReadReceiptInfo *arg1 = (RcimReadReceiptInfo *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReadReceiptInfo **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->respond_user_vec_len = arg2;
}


SWIGEXPORT jint JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReadReceiptInfo_1respond_1user_1vec_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RcimReadReceiptInfo *arg1 = (RcimReadReceiptInfo *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReadReceiptInfo **)&jarg1; 
  result = (int32_t) ((arg1)->respond_user_vec_len);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_new_1RcimReadReceiptInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RcimReadReceiptInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RcimReadReceiptInfo *)new RcimReadReceiptInfo();
  *(RcimReadReceiptInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_delete_1RcimReadReceiptInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RcimReadReceiptInfo *arg1 = (RcimReadReceiptInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RcimReadReceiptInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReadReceiptInfoV2_1has_1respond_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RcimReadReceiptInfoV2 *arg1 = (RcimReadReceiptInfoV2 *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReadReceiptInfoV2 **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->has_respond = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReadReceiptInfoV2_1has_1respond_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RcimReadReceiptInfoV2 *arg1 = (RcimReadReceiptInfoV2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReadReceiptInfoV2 **)&jarg1; 
  result = (bool) ((arg1)->has_respond);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReadReceiptInfoV2_1respond_1user_1vec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RcimReadReceiptInfoV2 *arg1 = (RcimReadReceiptInfoV2 *) 0 ;
  RcimReadReceiptUserInfo *arg2 = (RcimReadReceiptUserInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RcimReadReceiptInfoV2 **)&jarg1; 
  arg2 = *(RcimReadReceiptUserInfo **)&jarg2; 
  if (arg1) (arg1)->respond_user_vec = (RcimReadReceiptUserInfo const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReadReceiptInfoV2_1respond_1user_1vec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RcimReadReceiptInfoV2 *arg1 = (RcimReadReceiptInfoV2 *) 0 ;
  RcimReadReceiptUserInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReadReceiptInfoV2 **)&jarg1; 
  result = (RcimReadReceiptUserInfo *) ((arg1)->respond_user_vec);
  *(RcimReadReceiptUserInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReadReceiptInfoV2_1respond_1user_1vec_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RcimReadReceiptInfoV2 *arg1 = (RcimReadReceiptInfoV2 *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReadReceiptInfoV2 **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->respond_user_vec_len = arg2;
}


SWIGEXPORT jint JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReadReceiptInfoV2_1respond_1user_1vec_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RcimReadReceiptInfoV2 *arg1 = (RcimReadReceiptInfoV2 *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReadReceiptInfoV2 **)&jarg1; 
  result = (int32_t) ((arg1)->respond_user_vec_len);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReadReceiptInfoV2_1read_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RcimReadReceiptInfoV2 *arg1 = (RcimReadReceiptInfoV2 *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReadReceiptInfoV2 **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->read_count = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReadReceiptInfoV2_1read_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RcimReadReceiptInfoV2 *arg1 = (RcimReadReceiptInfoV2 *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReadReceiptInfoV2 **)&jarg1; 
  result = (uint32_t) ((arg1)->read_count);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReadReceiptInfoV2_1total_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RcimReadReceiptInfoV2 *arg1 = (RcimReadReceiptInfoV2 *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReadReceiptInfoV2 **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->total_count = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimReadReceiptInfoV2_1total_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RcimReadReceiptInfoV2 *arg1 = (RcimReadReceiptInfoV2 *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimReadReceiptInfoV2 **)&jarg1; 
  result = (uint32_t) ((arg1)->total_count);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_new_1RcimReadReceiptInfoV2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RcimReadReceiptInfoV2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RcimReadReceiptInfoV2 *)new RcimReadReceiptInfoV2();
  *(RcimReadReceiptInfoV2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_delete_1RcimReadReceiptInfoV2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RcimReadReceiptInfoV2 *arg1 = (RcimReadReceiptInfoV2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RcimReadReceiptInfoV2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimIosConfig_1thread_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimIosConfig *arg1 = (RcimIosConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimIosConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->thread_id = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->thread_id, (const char *)arg2);
    } else {
      arg1->thread_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimIosConfig_1thread_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimIosConfig *arg1 = (RcimIosConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimIosConfig **)&jarg1; 
  result = (char *) ((arg1)->thread_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimIosConfig_1category_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimIosConfig *arg1 = (RcimIosConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimIosConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->category = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->category, (const char *)arg2);
    } else {
      arg1->category = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimIosConfig_1category_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimIosConfig *arg1 = (RcimIosConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimIosConfig **)&jarg1; 
  result = (char *) ((arg1)->category);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimIosConfig_1apns_1collapse_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimIosConfig *arg1 = (RcimIosConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimIosConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->apns_collapse_id = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->apns_collapse_id, (const char *)arg2);
    } else {
      arg1->apns_collapse_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimIosConfig_1apns_1collapse_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimIosConfig *arg1 = (RcimIosConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimIosConfig **)&jarg1; 
  result = (char *) ((arg1)->apns_collapse_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimIosConfig_1rich_1media_1uri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimIosConfig *arg1 = (RcimIosConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimIosConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->rich_media_uri = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->rich_media_uri, (const char *)arg2);
    } else {
      arg1->rich_media_uri = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimIosConfig_1rich_1media_1uri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimIosConfig *arg1 = (RcimIosConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimIosConfig **)&jarg1; 
  result = (char *) ((arg1)->rich_media_uri);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimIosConfig_1interruption_1level_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimIosConfig *arg1 = (RcimIosConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimIosConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->interruption_level = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->interruption_level, (const char *)arg2);
    } else {
      arg1->interruption_level = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimIosConfig_1interruption_1level_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimIosConfig *arg1 = (RcimIosConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimIosConfig **)&jarg1; 
  result = (char *) ((arg1)->interruption_level);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_new_1RcimIosConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RcimIosConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RcimIosConfig *)new RcimIosConfig();
  *(RcimIosConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_delete_1RcimIosConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RcimIosConfig *arg1 = (RcimIosConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RcimIosConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1notification_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->notification_id = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->notification_id, (const char *)arg2);
    } else {
      arg1->notification_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1notification_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  result = (char *) ((arg1)->notification_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1mi_1channel_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->mi_channel_id = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->mi_channel_id, (const char *)arg2);
    } else {
      arg1->mi_channel_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1mi_1channel_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  result = (char *) ((arg1)->mi_channel_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1hw_1channel_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->hw_channel_id = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->hw_channel_id, (const char *)arg2);
    } else {
      arg1->hw_channel_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1hw_1channel_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  result = (char *) ((arg1)->hw_channel_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1hw_1importance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->hw_importance = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->hw_importance, (const char *)arg2);
    } else {
      arg1->hw_importance = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1hw_1importance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  result = (char *) ((arg1)->hw_importance);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1hw_1image_1url_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->hw_image_url = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->hw_image_url, (const char *)arg2);
    } else {
      arg1->hw_image_url = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1hw_1image_1url_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  result = (char *) ((arg1)->hw_image_url);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1hw_1category_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->hw_category = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->hw_category, (const char *)arg2);
    } else {
      arg1->hw_category = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1hw_1category_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  result = (char *) ((arg1)->hw_category);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1honor_1importance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->honor_importance = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->honor_importance, (const char *)arg2);
    } else {
      arg1->honor_importance = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1honor_1importance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  result = (char *) ((arg1)->honor_importance);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1honor_1image_1url_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->honor_image_url = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->honor_image_url, (const char *)arg2);
    } else {
      arg1->honor_image_url = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1honor_1image_1url_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  result = (char *) ((arg1)->honor_image_url);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1oppo_1channel_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->oppo_channel_id = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->oppo_channel_id, (const char *)arg2);
    } else {
      arg1->oppo_channel_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1oppo_1channel_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  result = (char *) ((arg1)->oppo_channel_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1vivo_1category_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->vivo_category = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->vivo_category, (const char *)arg2);
    } else {
      arg1->vivo_category = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1vivo_1category_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  result = (char *) ((arg1)->vivo_category);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1vivo_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->vivo_type = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->vivo_type, (const char *)arg2);
    } else {
      arg1->vivo_type = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1vivo_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  result = (char *) ((arg1)->vivo_type);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1fcm_1channel_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->fcm_channel_id = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->fcm_channel_id, (const char *)arg2);
    } else {
      arg1->fcm_channel_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1fcm_1channel_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  result = (char *) ((arg1)->fcm_channel_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1fcm_1collapse_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->fcm_collapse_key = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->fcm_collapse_key, (const char *)arg2);
    } else {
      arg1->fcm_collapse_key = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1fcm_1collapse_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  result = (char *) ((arg1)->fcm_collapse_key);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1fcm_1image_1url_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->fcm_image_url = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->fcm_image_url, (const char *)arg2);
    } else {
      arg1->fcm_image_url = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimAndroidConfig_1fcm_1image_1url_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  result = (char *) ((arg1)->fcm_image_url);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_new_1RcimAndroidConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RcimAndroidConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RcimAndroidConfig *)new RcimAndroidConfig();
  *(RcimAndroidConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_delete_1RcimAndroidConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RcimAndroidConfig *arg1 = (RcimAndroidConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RcimAndroidConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimHarmonyConfig_1image_1url_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimHarmonyConfig *arg1 = (RcimHarmonyConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimHarmonyConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->image_url = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->image_url, (const char *)arg2);
    } else {
      arg1->image_url = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimHarmonyConfig_1image_1url_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimHarmonyConfig *arg1 = (RcimHarmonyConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimHarmonyConfig **)&jarg1; 
  result = (char *) ((arg1)->image_url);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimHarmonyConfig_1category_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimHarmonyConfig *arg1 = (RcimHarmonyConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimHarmonyConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->category = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->category, (const char *)arg2);
    } else {
      arg1->category = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimHarmonyConfig_1category_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimHarmonyConfig *arg1 = (RcimHarmonyConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimHarmonyConfig **)&jarg1; 
  result = (char *) ((arg1)->category);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_new_1RcimHarmonyConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RcimHarmonyConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RcimHarmonyConfig *)new RcimHarmonyConfig();
  *(RcimHarmonyConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_delete_1RcimHarmonyConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RcimHarmonyConfig *arg1 = (RcimHarmonyConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RcimHarmonyConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimPushConfig_1disable_1push_1title_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RcimPushConfig *arg1 = (RcimPushConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimPushConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->disable_push_title = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimPushConfig_1disable_1push_1title_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RcimPushConfig *arg1 = (RcimPushConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimPushConfig **)&jarg1; 
  result = (bool) ((arg1)->disable_push_title);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimPushConfig_1push_1title_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimPushConfig *arg1 = (RcimPushConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimPushConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->push_title = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->push_title, (const char *)arg2);
    } else {
      arg1->push_title = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimPushConfig_1push_1title_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimPushConfig *arg1 = (RcimPushConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimPushConfig **)&jarg1; 
  result = (char *) ((arg1)->push_title);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimPushConfig_1push_1content_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimPushConfig *arg1 = (RcimPushConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimPushConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->push_content = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->push_content, (const char *)arg2);
    } else {
      arg1->push_content = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimPushConfig_1push_1content_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimPushConfig *arg1 = (RcimPushConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimPushConfig **)&jarg1; 
  result = (char *) ((arg1)->push_content);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimPushConfig_1push_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimPushConfig *arg1 = (RcimPushConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimPushConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->push_data = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->push_data, (const char *)arg2);
    } else {
      arg1->push_data = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimPushConfig_1push_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimPushConfig *arg1 = (RcimPushConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimPushConfig **)&jarg1; 
  result = (char *) ((arg1)->push_data);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimPushConfig_1force_1show_1detail_1content_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RcimPushConfig *arg1 = (RcimPushConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimPushConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->force_show_detail_content = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimPushConfig_1force_1show_1detail_1content_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RcimPushConfig *arg1 = (RcimPushConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimPushConfig **)&jarg1; 
  result = (bool) ((arg1)->force_show_detail_content);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimPushConfig_1ios_1config_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RcimPushConfig *arg1 = (RcimPushConfig *) 0 ;
  RcimIosConfig *arg2 = (RcimIosConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RcimPushConfig **)&jarg1; 
  arg2 = *(RcimIosConfig **)&jarg2; 
  if (arg1) (arg1)->ios_config = (RcimIosConfig const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimPushConfig_1ios_1config_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RcimPushConfig *arg1 = (RcimPushConfig *) 0 ;
  RcimIosConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimPushConfig **)&jarg1; 
  result = (RcimIosConfig *) ((arg1)->ios_config);
  *(RcimIosConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimPushConfig_1android_1config_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RcimPushConfig *arg1 = (RcimPushConfig *) 0 ;
  RcimAndroidConfig *arg2 = (RcimAndroidConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RcimPushConfig **)&jarg1; 
  arg2 = *(RcimAndroidConfig **)&jarg2; 
  if (arg1) (arg1)->android_config = (RcimAndroidConfig const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimPushConfig_1android_1config_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RcimPushConfig *arg1 = (RcimPushConfig *) 0 ;
  RcimAndroidConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimPushConfig **)&jarg1; 
  result = (RcimAndroidConfig *) ((arg1)->android_config);
  *(RcimAndroidConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimPushConfig_1harmony_1config_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RcimPushConfig *arg1 = (RcimPushConfig *) 0 ;
  RcimHarmonyConfig *arg2 = (RcimHarmonyConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RcimPushConfig **)&jarg1; 
  arg2 = *(RcimHarmonyConfig **)&jarg2; 
  if (arg1) (arg1)->harmony_config = (RcimHarmonyConfig const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimPushConfig_1harmony_1config_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RcimPushConfig *arg1 = (RcimPushConfig *) 0 ;
  RcimHarmonyConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimPushConfig **)&jarg1; 
  result = (RcimHarmonyConfig *) ((arg1)->harmony_config);
  *(RcimHarmonyConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_new_1RcimPushConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RcimPushConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RcimPushConfig *)new RcimPushConfig();
  *(RcimPushConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_delete_1RcimPushConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RcimPushConfig *arg1 = (RcimPushConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RcimPushConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1conv_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  RcimConversationType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  arg2 = (RcimConversationType)jarg2; 
  if (arg1) (arg1)->conv_type = arg2;
}


SWIGEXPORT jint JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1conv_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  RcimConversationType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  result =  ((arg1)->conv_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1target_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->target_id = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->target_id, (const char *)arg2);
    } else {
      arg1->target_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1target_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  result = (char *) ((arg1)->target_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1channel_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->channel_id = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->channel_id, (const char *)arg2);
    } else {
      arg1->channel_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1channel_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  result = (char *) ((arg1)->channel_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1message_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->message_id = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1message_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  result = (int64_t) ((arg1)->message_id);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1direction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  RcimMessageDirection arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  arg2 = (RcimMessageDirection)jarg2; 
  if (arg1) (arg1)->direction = arg2;
}


SWIGEXPORT jint JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1direction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  RcimMessageDirection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  result =  ((arg1)->direction);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1sender_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->sender_id = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->sender_id, (const char *)arg2);
    } else {
      arg1->sender_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1sender_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  result = (char *) ((arg1)->sender_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1received_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  RcimReceivedStatus *arg2 = (RcimReceivedStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  arg2 = *(RcimReceivedStatus **)&jarg2; 
  if (arg1) (arg1)->received_status = (RcimReceivedStatus const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1received_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  RcimReceivedStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  result = (RcimReceivedStatus *) ((arg1)->received_status);
  *(RcimReceivedStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1sent_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  RcimSentStatus arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  arg2 = (RcimSentStatus)jarg2; 
  if (arg1) (arg1)->sent_status = arg2;
}


SWIGEXPORT jint JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1sent_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  RcimSentStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  result =  ((arg1)->sent_status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1received_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->received_time = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1received_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  result = (int64_t) ((arg1)->received_time);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1sent_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->sent_time = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1sent_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  result = (int64_t) ((arg1)->sent_time);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1object_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->object_name = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->object_name, (const char *)arg2);
    } else {
      arg1->object_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1object_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  result = (char *) ((arg1)->object_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1content_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->content = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->content, (const char *)arg2);
    } else {
      arg1->content = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1content_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  result = (char *) ((arg1)->content);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1searchable_1words_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->searchable_words = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->searchable_words, (const char *)arg2);
    } else {
      arg1->searchable_words = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1searchable_1words_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  result = (char *) ((arg1)->searchable_words);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1uid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->uid = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->uid, (const char *)arg2);
    } else {
      arg1->uid = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1uid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  result = (char *) ((arg1)->uid);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1extra_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->extra = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->extra, (const char *)arg2);
    } else {
      arg1->extra = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1extra_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  result = (char *) ((arg1)->extra);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1read_1receipt_1info_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  RcimReadReceiptInfo *arg2 = (RcimReadReceiptInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  arg2 = *(RcimReadReceiptInfo **)&jarg2; 
  if (arg1) (arg1)->read_receipt_info = (RcimReadReceiptInfo const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1read_1receipt_1info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  RcimReadReceiptInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  result = (RcimReadReceiptInfo *) ((arg1)->read_receipt_info);
  *(RcimReadReceiptInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1read_1receipt_1info_1v2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  RcimReadReceiptInfoV2 *arg2 = (RcimReadReceiptInfoV2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  arg2 = *(RcimReadReceiptInfoV2 **)&jarg2; 
  if (arg1) (arg1)->read_receipt_info_v2 = (RcimReadReceiptInfoV2 const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1read_1receipt_1info_1v2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  RcimReadReceiptInfoV2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  result = (RcimReadReceiptInfoV2 *) ((arg1)->read_receipt_info_v2);
  *(RcimReadReceiptInfoV2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1is_1notification_1disabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_notification_disabled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1is_1notification_1disabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  result = (bool) ((arg1)->is_notification_disabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1push_1config_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  RcimPushConfig *arg2 = (RcimPushConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  arg2 = *(RcimPushConfig **)&jarg2; 
  if (arg1) (arg1)->push_config = (RcimPushConfig const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1push_1config_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  RcimPushConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  result = (RcimPushConfig *) ((arg1)->push_config);
  *(RcimPushConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1is_1offline_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_offline = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1is_1offline_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  result = (bool) ((arg1)->is_offline);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1is_1ext_1supported_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_ext_supported = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1is_1ext_1supported_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  result = (bool) ((arg1)->is_ext_supported);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1ext_1content_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->ext_content = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->ext_content, (const char *)arg2);
    } else {
      arg1->ext_content = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1ext_1content_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  result = (char *) ((arg1)->ext_content);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1is_1need_1receipt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_need_receipt = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1is_1need_1receipt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  result = (bool) ((arg1)->is_need_receipt);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1has_1sent_1receipt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->has_sent_receipt = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimMessageBox_1has_1sent_1receipt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimMessageBox **)&jarg1; 
  result = (bool) ((arg1)->has_sent_receipt);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_new_1RcimMessageBox(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RcimMessageBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RcimMessageBox *)new RcimMessageBox();
  *(RcimMessageBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_delete_1RcimMessageBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RcimMessageBox *arg1 = (RcimMessageBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RcimMessageBox **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_rong_imlib_swig_RcClientJNI_createEngineBuilder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2) {
  jint jresult = 0 ;
  RcimEngineBuilderParam *arg1 = (RcimEngineBuilderParam *) 0 ;
  int64_t *arg2 = (int64_t *) 0 ;
  int64_t temp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RcimEngineBuilderParam **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (int64_t)0;
    arg2 = &temp2; 
  }
  result = (int)rcim::createEngineBuilder(arg1,arg2);
  jresult = (jint)result; 
  {
    jlong jvalue = (jlong)temp2;
    jenv->SetLongArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_rong_imlib_swig_RcClientJNI_engineBuilderBuild(JNIEnv *jenv, jclass jcls, jlong jarg1, jlongArray jarg2) {
  jint jresult = 0 ;
  int64_t arg1 ;
  int64_t *arg2 = (int64_t *) 0 ;
  int64_t temp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (int64_t)0;
    arg2 = &temp2; 
  }
  result = (int)rcim::engineBuilderBuild(arg1,arg2);
  jresult = (jint)result; 
  {
    jlong jvalue = (jlong)temp2;
    jenv->SetLongArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_new_1RcimNativeStringCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rcim::RcimNativeStringCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rcim::RcimNativeStringCallback *)new SwigDirector_RcimNativeStringCallback(jenv);
  *(rcim::RcimNativeStringCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_delete_1RcimNativeStringCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rcim::RcimNativeStringCallback *arg1 = (rcim::RcimNativeStringCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rcim::RcimNativeStringCallback **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimNativeStringCallback_1onResult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jstring jarg4) {
  rcim::RcimNativeStringCallback *arg1 = (rcim::RcimNativeStringCallback *) 0 ;
  rcim::RcimNativeStringCallback *arg2 = (rcim::RcimNativeStringCallback *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rcim::RcimNativeStringCallback **)&jarg1; 
  arg2 = *(rcim::RcimNativeStringCallback **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->onResult(arg2,arg3,(char const *)arg4);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimNativeStringCallback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  rcim::RcimNativeStringCallback *obj = *((rcim::RcimNativeStringCallback **)&objarg);
  (void)jcls;
  SwigDirector_RcimNativeStringCallback *director = static_cast<SwigDirector_RcimNativeStringCallback *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimNativeStringCallback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  rcim::RcimNativeStringCallback *obj = *((rcim::RcimNativeStringCallback **)&objarg);
  SwigDirector_RcimNativeStringCallback *director = dynamic_cast<SwigDirector_RcimNativeStringCallback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_new_1RcimNativeSendMessageCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rcim::RcimNativeSendMessageCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rcim::RcimNativeSendMessageCallback *)new SwigDirector_RcimNativeSendMessageCallback(jenv);
  *(rcim::RcimNativeSendMessageCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_delete_1RcimNativeSendMessageCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rcim::RcimNativeSendMessageCallback *arg1 = (rcim::RcimNativeSendMessageCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rcim::RcimNativeSendMessageCallback **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimNativeSendMessageCallback_1onSave(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  rcim::RcimNativeSendMessageCallback *arg1 = (rcim::RcimNativeSendMessageCallback *) 0 ;
  RcimMessageBox *arg2 = (RcimMessageBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rcim::RcimNativeSendMessageCallback **)&jarg1; 
  arg2 = *(RcimMessageBox **)&jarg2; 
  (arg1)->onSave((RcimMessageBox const *)arg2);
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimNativeSendMessageCallback_1onResult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_) {
  rcim::RcimNativeSendMessageCallback *arg1 = (rcim::RcimNativeSendMessageCallback *) 0 ;
  rcim::RcimNativeSendMessageCallback *arg2 = (rcim::RcimNativeSendMessageCallback *) 0 ;
  int arg3 ;
  RcimMessageBox *arg4 = (RcimMessageBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(rcim::RcimNativeSendMessageCallback **)&jarg1; 
  arg2 = *(rcim::RcimNativeSendMessageCallback **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(RcimMessageBox **)&jarg4; 
  (arg1)->onResult(arg2,arg3,(RcimMessageBox const *)arg4);
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimNativeSendMessageCallback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  rcim::RcimNativeSendMessageCallback *obj = *((rcim::RcimNativeSendMessageCallback **)&objarg);
  (void)jcls;
  SwigDirector_RcimNativeSendMessageCallback *director = static_cast<SwigDirector_RcimNativeSendMessageCallback *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimNativeSendMessageCallback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  rcim::RcimNativeSendMessageCallback *obj = *((rcim::RcimNativeSendMessageCallback **)&objarg);
  SwigDirector_RcimNativeSendMessageCallback *director = dynamic_cast<SwigDirector_RcimNativeSendMessageCallback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_new_1RcimNativeIntListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rcim::RcimNativeIntListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rcim::RcimNativeIntListener *)new SwigDirector_RcimNativeIntListener(jenv);
  *(rcim::RcimNativeIntListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_delete_1RcimNativeIntListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rcim::RcimNativeIntListener *arg1 = (rcim::RcimNativeIntListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rcim::RcimNativeIntListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimNativeIntListener_1onChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  rcim::RcimNativeIntListener *arg1 = (rcim::RcimNativeIntListener *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rcim::RcimNativeIntListener **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->onChanged(arg2);
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimNativeIntListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  rcim::RcimNativeIntListener *obj = *((rcim::RcimNativeIntListener **)&objarg);
  (void)jcls;
  SwigDirector_RcimNativeIntListener *director = static_cast<SwigDirector_RcimNativeIntListener *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_RcimNativeIntListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  rcim::RcimNativeIntListener *obj = *((rcim::RcimNativeIntListener **)&objarg);
  SwigDirector_RcimNativeIntListener *director = dynamic_cast<SwigDirector_RcimNativeIntListener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_io_rong_imlib_swig_RcClientJNI_newSdkVersionArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int64_t)rcim::newSdkVersionArray(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_insertSdkVersionArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jlongArray jarg2, jint jarg3) {
  int64_t arg1 ;
  int64_t *arg2 = (int64_t *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  {
    arg2 = jenv->GetLongArrayElements(jarg2, 0);
  }
  arg3 = (int)jarg3; 
  rcim::insertSdkVersionArray(arg1,arg2,arg3);
  {
    jenv->ReleaseLongArrayElements(jarg2, arg2, 0);
  }
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_freeSdkVersionArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int64_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  rcim::freeSdkVersionArray(arg1);
}


SWIGEXPORT jint JNICALL Java_io_rong_imlib_swig_RcClientJNI_engineBuilderSetStorePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  int64_t arg1 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)rcim::engineBuilderSetStorePath(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_engineConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  int64_t arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  rcim::RcimNativeStringCallback *arg4 = (rcim::RcimNativeStringCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (int64_t)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  arg4 = *(rcim::RcimNativeStringCallback **)&jarg4; 
  rcim::engineConnect(arg1,(char const *)arg2,arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_engineSetConnectionStatusListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  int64_t arg1 ;
  rcim::RcimNativeIntListener *arg2 = (rcim::RcimNativeIntListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int64_t)jarg1; 
  arg2 = *(rcim::RcimNativeIntListener **)&jarg2; 
  rcim::engineSetConnectionStatusListener(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_engineSendMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  int64_t arg1 ;
  RcimMessageBox *arg2 = (RcimMessageBox *) 0 ;
  rcim::RcimNativeSendMessageCallback *arg3 = (rcim::RcimNativeSendMessageCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = (int64_t)jarg1; 
  arg2 = *(RcimMessageBox **)&jarg2; 
  arg3 = *(rcim::RcimNativeSendMessageCallback **)&jarg3; 
  rcim::engineSendMessage(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_io_rong_imlib_swig_RcClientJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[4] = {
    {
      "SwigDirector_RcimNativeStringCallback_onResult", "(Lio/rong/imlib/swig/RcimNativeStringCallback;JILjava/lang/String;)V" 
    },
    {
      "SwigDirector_RcimNativeSendMessageCallback_onSave", "(Lio/rong/imlib/swig/RcimNativeSendMessageCallback;J)V" 
    },
    {
      "SwigDirector_RcimNativeSendMessageCallback_onResult", "(Lio/rong/imlib/swig/RcimNativeSendMessageCallback;JIJ)V" 
    },
    {
      "SwigDirector_RcimNativeIntListener_onChanged", "(Lio/rong/imlib/swig/RcimNativeIntListener;I)V" 
    }
  };
  Swig::jclass_RcClientJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_RcClientJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif


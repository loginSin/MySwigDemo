/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.rong.imlib.internal.swig;

public class RcimStringVector extends java.util.AbstractList<String> implements java.util.RandomAccess {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected RcimStringVector(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(RcimStringVector obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(RcimStringVector obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RcClientJNI.delete_RcimStringVector(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

/**
 * 该方法由配置生成<p>
 * delete() 方法名太过于普通，所以新增 swigDelete()<p>
 * 使用该方法进行释放，不要使用 delete()<p>
 * 方便进行代码创建、释放的检查
 */
public synchronized void swigDelete() {
    delete();
}

/**
 * 该方法由配置生成<p>
 * WARNING： 原则上不能调用该方法，除非你明确知道你需要这个方法<p>
 * 静态工厂方法：从 C 指针构建该对象
 */
public static RcimStringVector fromPointer(long cPtr) {
    return new RcimStringVector(cPtr, false);
}

/**
 * 该方法由配置生成<p>
 * WARNING： 原则上不能调用该方法，除非你明确知道你需要这个方法<p>
 * 获取原始指针
 */
public long getCPtr() {
    return swigCPtr;
}

  public RcimStringVector(String[] initialElements) {
    this();
    reserve(initialElements.length);

    for (String element : initialElements) {
      add(element);
    }
  }

  public RcimStringVector(Iterable<String> initialElements) {
    this();
    for (String element : initialElements) {
      add(element);
    }
  }

  public String get(int index) {
    return doGet(index);
  }

  public String set(int index, String e) {
    return doSet(index, e);
  }

  public boolean add(String e) {
    modCount++;
    doAdd(e);
    return true;
  }

  public void add(int index, String e) {
    modCount++;
    doAdd(index, e);
  }

  public String remove(int index) {
    modCount++;
    return doRemove(index);
  }

  protected void removeRange(int fromIndex, int toIndex) {
    modCount++;
    doRemoveRange(fromIndex, toIndex);
  }

  public int size() {
    return doSize();
  }

  public int capacity() {
    return doCapacity();
  }

  public void reserve(int n) {
    doReserve(n);
  }

  public RcimStringVector() {
    this(RcClientJNI.new_RcimStringVector__SWIG_0(), true);
  }

  public RcimStringVector(RcimStringVector other) {
    this(RcClientJNI.new_RcimStringVector__SWIG_1(RcimStringVector.getCPtr(other), other), true);
  }

  public boolean isEmpty() {
    return RcClientJNI.RcimStringVector_isEmpty(swigCPtr, this);
  }

  public void clear() {
    RcClientJNI.RcimStringVector_clear(swigCPtr, this);
  }

  public RcimStringVector(int count, String value) {
    this(RcClientJNI.new_RcimStringVector__SWIG_2(count, value), true);
  }

  private int doCapacity() {
    return RcClientJNI.RcimStringVector_doCapacity(swigCPtr, this);
  }

  private void doReserve(int n) {
    RcClientJNI.RcimStringVector_doReserve(swigCPtr, this, n);
  }

  private int doSize() {
    return RcClientJNI.RcimStringVector_doSize(swigCPtr, this);
  }

  private void doAdd(String x) {
    RcClientJNI.RcimStringVector_doAdd__SWIG_0(swigCPtr, this, x);
  }

  private void doAdd(int index, String x) {
    RcClientJNI.RcimStringVector_doAdd__SWIG_1(swigCPtr, this, index, x);
  }

  private String doRemove(int index) {
    return RcClientJNI.RcimStringVector_doRemove(swigCPtr, this, index);
  }

  private String doGet(int index) {
    return RcClientJNI.RcimStringVector_doGet(swigCPtr, this, index);
  }

  private String doSet(int index, String val) {
    return RcClientJNI.RcimStringVector_doSet(swigCPtr, this, index, val);
  }

  private void doRemoveRange(int fromIndex, int toIndex) {
    RcClientJNI.RcimStringVector_doRemoveRange(swigCPtr, this, fromIndex, toIndex);
  }

}
